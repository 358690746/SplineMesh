using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using UnityEngine;

namespace SplineMesh {
    [ExecuteInEditMode]
    [DisallowMultipleComponent]
    [RequireComponent(typeof(Spline), typeof(ExtrudedHalfProfile), typeof(SplineScroll))]
    public class ExtrusionRoundedEnd : MonoBehaviour {
        private GameObject generated;
        private GameObject start;
        private GameObject end;

        private Spline spline;
        private SplineScroll splineScroll;
        private ExtrudedHalfProfile extrudedHalfProfile;

        public Material material;

        private void OnEnable() {
            string generatedName = "generated by " + GetType().Name;
            var generatedTranform = transform.Find(generatedName);
            generated = generatedTranform != null ?
                generatedTranform.gameObject :
                GetGenerated(generatedName);

            var startT = generated.transform.Find("start");
            if (startT == null) {
                start = UOUtility.Create("start", generated, typeof(MeshFilter), typeof(MeshRenderer));
                start.GetComponent<MeshRenderer>().material = material;
            } else {
                start = startT.gameObject;
            }

            var endT = generated.transform.Find("end");
            if (endT == null) {
                end = UOUtility.Create("end", generated, typeof(MeshFilter), typeof(MeshRenderer));
                end.GetComponent<MeshRenderer>().material = material;
            } else {
                end = endT.gameObject;
            }

            spline = GetComponentInParent<Spline>();
            splineScroll = GetComponent<SplineScroll>();
            extrudedHalfProfile = GetComponent<ExtrudedHalfProfile>();

            UpdateMesh();
            extrudedHalfProfile.Changed += (s, e) => UpdateMesh();
        }

        private void Update() {
            var sample = spline.GetSampleAtDistance(0);
            start.transform.localPosition = sample.location;
            start.transform.localRotation = sample.Rotation;
            start.transform.Rotate(0, 180, 0);

            sample = spline.GetSampleAtDistance(spline.Length * splineScroll.rate);
            end.transform.localPosition = sample.location;
            end.transform.localRotation = sample.Rotation;
        }

        private void UpdateMesh() {
            var vertices = new List<Vector3>();
            var normals = new List<Vector3>();
            var triangles = new List<int>();

            var profile = extrudedHalfProfile.GetHalProfileWithBase();
            vertices.Add(new Vector3(0, profile.First().point.y, 0));
            normals.Add(Vector3.up);

            for (int i = 0; i <= 180; i += 20) {
                foreach (var v in profile) {
                    Vector3 tv = new Vector3(v.point.x, v.point.y, 0);
                    tv = Quaternion.Euler(0, i, 0) * tv;
                    Vector3 tn = new Vector3(v.normal.x, v.normal.y, 0);
                    tn = Quaternion.Euler(0, i, 0) * tn;
                    vertices.Add(tv);
                    normals.Add(tn);
                }
            }
            vertices.Add(new Vector3(0, profile.Last().point.y, 0));
            normals.Add(Vector3.down);

            int index = 1;
            for (int i = 0; i < 180; i += 20) {
                triangles.Add(0);
                triangles.Add(index);
                triangles.Add(index + profile.Count);
                for (int j = 0; j < profile.Count - 1; j++) {
                    triangles.Add(index);
                    triangles.Add(index + profile.Count);
                    triangles.Add(index + 1);
                    triangles.Add(index + 1);
                    triangles.Add(index + profile.Count);
                    triangles.Add(index + profile.Count + 1);
                    index++;
                }
                triangles.Add(vertices.Count - 1);
                triangles.Add(index + profile.Count);
                triangles.Add(index);
                index++;
            }

            Mesh mesh = new Mesh();
            MeshUtility.Update(mesh, mesh, triangles, vertices, normals);
            start.GetComponent<MeshFilter>().mesh = mesh;
            end.GetComponent<MeshFilter>().mesh = mesh;
        }

        private GameObject GetGenerated(string generatedName) {
            return UOUtility.Create(generatedName,
                    gameObject,
                    typeof(MeshFilter),
                    typeof(MeshRenderer),
                    typeof(ExtrusionSegment),
                    typeof(MeshCollider));
        }
    }
}
